// Generated by @wagmi/cli@0.1.11 on 5/13/2023 at 6:33:16 PM
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import { ReadContractResult, WriteContractMode, PrepareWriteContractResult } from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// poolTogetherPrizePool
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const poolTogetherPrizePoolABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_yieldSource', internalType: 'contract IYieldSource', type: 'address' },
    ],
  },
  { type: 'event', anonymous: false, inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }], name: 'AwardCaptured' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'winner', internalType: 'address', type: 'address', indexed: true },
      { name: 'token', internalType: 'contract ITicket', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Awarded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'winner', internalType: 'address', type: 'address', indexed: true },
      { name: 'token', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'AwardedExternalERC20',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'winner', internalType: 'address', type: 'address', indexed: true },
      { name: 'token', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenIds', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
    ],
    name: 'AwardedExternalERC721',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'balanceCap', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'BalanceCapSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'token', internalType: 'contract ITicket', type: 'address', indexed: true }],
    name: 'ControlledTokenAdded',
  },
  { type: 'event', anonymous: false, inputs: [{ name: 'yieldSource', internalType: 'address', type: 'address', indexed: true }], name: 'Deployed' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'token', internalType: 'contract ITicket', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'error', internalType: 'bytes', type: 'bytes', indexed: false }],
    name: 'ErrorAwardingExternalERC721',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'liquidityCap', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'LiquidityCapSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'pendingOwner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnershipOffered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'prizeStrategy', internalType: 'address', type: 'address', indexed: true }],
    name: 'PrizeStrategySet',
  },
  { type: 'event', anonymous: false, inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false }], name: 'Swept' },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'ticket', internalType: 'contract ITicket', type: 'address', indexed: true }],
    name: 'TicketSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'token', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'TransferredExternalERC20',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'token', internalType: 'contract ITicket', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'redeemed', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Withdrawal',
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'VERSION', outputs: [{ name: '', internalType: 'string', type: 'string' }] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'award',
    outputs: [],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'awardBalance', outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_externalToken', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'awardExternalERC20',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_externalToken', internalType: 'address', type: 'address' },
      { name: '_tokenIds', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'awardExternalERC721',
    outputs: [],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'balance', outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_externalToken', internalType: 'address', type: 'address' }],
    name: 'canAwardExternal',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'captureAwardBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'claimOwnership', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_compLike', internalType: 'contract ICompLike', type: 'address' },
      { name: '_to', internalType: 'address', type: 'address' },
    ],
    name: 'compLikeDelegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      { name: '_delegate', internalType: 'address', type: 'address' },
    ],
    name: 'depositToAndDelegate',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAccountedBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'getBalanceCap', outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getLiquidityCap',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPrizeStrategy',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTicket',
    outputs: [{ name: '', internalType: 'contract ITicket', type: 'address' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'getToken', outputs: [{ name: '', internalType: 'address', type: 'address' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_controlledToken', internalType: 'contract ITicket', type: 'address' }],
    name: 'isControlled',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'owner', outputs: [{ name: '', internalType: 'address', type: 'address' }] },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'pendingOwner', outputs: [{ name: '', internalType: 'address', type: 'address' }] },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_balanceCap', internalType: 'uint256', type: 'uint256' }],
    name: 'setBalanceCap',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_liquidityCap', internalType: 'uint256', type: 'uint256' }],
    name: 'setLiquidityCap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_prizeStrategy', internalType: 'address', type: 'address' }],
    name: 'setPrizeStrategy',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_ticket', internalType: 'contract ITicket', type: 'address' }],
    name: 'setTicket',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'sweep', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_externalToken', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferExternalERC20',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawFrom',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'yieldSource',
    outputs: [{ name: '', internalType: 'contract IYieldSource', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__.
 */
export function usePoolTogetherPrizePool(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: poolTogetherPrizePoolABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__.
 */
export function usePoolTogetherPrizePoolRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof poolTogetherPrizePoolABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof poolTogetherPrizePoolABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: poolTogetherPrizePoolABI, ...config } as UseContractReadConfig<
    typeof poolTogetherPrizePoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"VERSION"`.
 */
export function usePoolTogetherPrizePoolVersion<TSelectData = ReadContractResult<typeof poolTogetherPrizePoolABI, 'VERSION'>>(
  config: Omit<UseContractReadConfig<typeof poolTogetherPrizePoolABI, 'VERSION', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: poolTogetherPrizePoolABI, functionName: 'VERSION', ...config } as UseContractReadConfig<
    typeof poolTogetherPrizePoolABI,
    'VERSION',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"awardBalance"`.
 */
export function usePoolTogetherPrizePoolAwardBalance<TSelectData = ReadContractResult<typeof poolTogetherPrizePoolABI, 'awardBalance'>>(
  config: Omit<UseContractReadConfig<typeof poolTogetherPrizePoolABI, 'awardBalance', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: poolTogetherPrizePoolABI, functionName: 'awardBalance', ...config } as UseContractReadConfig<
    typeof poolTogetherPrizePoolABI,
    'awardBalance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"canAwardExternal"`.
 */
export function usePoolTogetherPrizePoolCanAwardExternal<TSelectData = ReadContractResult<typeof poolTogetherPrizePoolABI, 'canAwardExternal'>>(
  config: Omit<UseContractReadConfig<typeof poolTogetherPrizePoolABI, 'canAwardExternal', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: poolTogetherPrizePoolABI, functionName: 'canAwardExternal', ...config } as UseContractReadConfig<
    typeof poolTogetherPrizePoolABI,
    'canAwardExternal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"getAccountedBalance"`.
 */
export function usePoolTogetherPrizePoolGetAccountedBalance<TSelectData = ReadContractResult<typeof poolTogetherPrizePoolABI, 'getAccountedBalance'>>(
  config: Omit<UseContractReadConfig<typeof poolTogetherPrizePoolABI, 'getAccountedBalance', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: poolTogetherPrizePoolABI, functionName: 'getAccountedBalance', ...config } as UseContractReadConfig<
    typeof poolTogetherPrizePoolABI,
    'getAccountedBalance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"getBalanceCap"`.
 */
export function usePoolTogetherPrizePoolGetBalanceCap<TSelectData = ReadContractResult<typeof poolTogetherPrizePoolABI, 'getBalanceCap'>>(
  config: Omit<UseContractReadConfig<typeof poolTogetherPrizePoolABI, 'getBalanceCap', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: poolTogetherPrizePoolABI, functionName: 'getBalanceCap', ...config } as UseContractReadConfig<
    typeof poolTogetherPrizePoolABI,
    'getBalanceCap',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"getLiquidityCap"`.
 */
export function usePoolTogetherPrizePoolGetLiquidityCap<TSelectData = ReadContractResult<typeof poolTogetherPrizePoolABI, 'getLiquidityCap'>>(
  config: Omit<UseContractReadConfig<typeof poolTogetherPrizePoolABI, 'getLiquidityCap', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: poolTogetherPrizePoolABI, functionName: 'getLiquidityCap', ...config } as UseContractReadConfig<
    typeof poolTogetherPrizePoolABI,
    'getLiquidityCap',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"getPrizeStrategy"`.
 */
export function usePoolTogetherPrizePoolGetPrizeStrategy<TSelectData = ReadContractResult<typeof poolTogetherPrizePoolABI, 'getPrizeStrategy'>>(
  config: Omit<UseContractReadConfig<typeof poolTogetherPrizePoolABI, 'getPrizeStrategy', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: poolTogetherPrizePoolABI, functionName: 'getPrizeStrategy', ...config } as UseContractReadConfig<
    typeof poolTogetherPrizePoolABI,
    'getPrizeStrategy',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"getTicket"`.
 */
export function usePoolTogetherPrizePoolGetTicket<TSelectData = ReadContractResult<typeof poolTogetherPrizePoolABI, 'getTicket'>>(
  config: Omit<UseContractReadConfig<typeof poolTogetherPrizePoolABI, 'getTicket', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: poolTogetherPrizePoolABI, functionName: 'getTicket', ...config } as UseContractReadConfig<
    typeof poolTogetherPrizePoolABI,
    'getTicket',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"getToken"`.
 */
export function usePoolTogetherPrizePoolGetToken<TSelectData = ReadContractResult<typeof poolTogetherPrizePoolABI, 'getToken'>>(
  config: Omit<UseContractReadConfig<typeof poolTogetherPrizePoolABI, 'getToken', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: poolTogetherPrizePoolABI, functionName: 'getToken', ...config } as UseContractReadConfig<
    typeof poolTogetherPrizePoolABI,
    'getToken',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"isControlled"`.
 */
export function usePoolTogetherPrizePoolIsControlled<TSelectData = ReadContractResult<typeof poolTogetherPrizePoolABI, 'isControlled'>>(
  config: Omit<UseContractReadConfig<typeof poolTogetherPrizePoolABI, 'isControlled', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: poolTogetherPrizePoolABI, functionName: 'isControlled', ...config } as UseContractReadConfig<
    typeof poolTogetherPrizePoolABI,
    'isControlled',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePoolTogetherPrizePoolOnErc721Received<TSelectData = ReadContractResult<typeof poolTogetherPrizePoolABI, 'onERC721Received'>>(
  config: Omit<UseContractReadConfig<typeof poolTogetherPrizePoolABI, 'onERC721Received', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: poolTogetherPrizePoolABI, functionName: 'onERC721Received', ...config } as UseContractReadConfig<
    typeof poolTogetherPrizePoolABI,
    'onERC721Received',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"owner"`.
 */
export function usePoolTogetherPrizePoolOwner<TSelectData = ReadContractResult<typeof poolTogetherPrizePoolABI, 'owner'>>(
  config: Omit<UseContractReadConfig<typeof poolTogetherPrizePoolABI, 'owner', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: poolTogetherPrizePoolABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof poolTogetherPrizePoolABI,
    'owner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"pendingOwner"`.
 */
export function usePoolTogetherPrizePoolPendingOwner<TSelectData = ReadContractResult<typeof poolTogetherPrizePoolABI, 'pendingOwner'>>(
  config: Omit<UseContractReadConfig<typeof poolTogetherPrizePoolABI, 'pendingOwner', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: poolTogetherPrizePoolABI, functionName: 'pendingOwner', ...config } as UseContractReadConfig<
    typeof poolTogetherPrizePoolABI,
    'pendingOwner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"yieldSource"`.
 */
export function usePoolTogetherPrizePoolYieldSource<TSelectData = ReadContractResult<typeof poolTogetherPrizePoolABI, 'yieldSource'>>(
  config: Omit<UseContractReadConfig<typeof poolTogetherPrizePoolABI, 'yieldSource', TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: poolTogetherPrizePoolABI, functionName: 'yieldSource', ...config } as UseContractReadConfig<
    typeof poolTogetherPrizePoolABI,
    'yieldSource',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__.
 */
export function usePoolTogetherPrizePoolWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof poolTogetherPrizePoolABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof poolTogetherPrizePoolABI, TFunctionName> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<TMode, typeof poolTogetherPrizePoolABI, TFunctionName>({ abi: poolTogetherPrizePoolABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"award"`.
 */
export function usePoolTogetherPrizePoolAward<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof poolTogetherPrizePoolABI, 'award'>['abi'], 'award'> & { functionName?: 'award' }
    : UseContractWriteConfig<TMode, typeof poolTogetherPrizePoolABI, 'award'> & {
        abi?: never
        functionName?: 'award'
      } = {} as any
) {
  return useContractWrite<TMode, typeof poolTogetherPrizePoolABI, 'award'>({ abi: poolTogetherPrizePoolABI, functionName: 'award', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"awardExternalERC20"`.
 */
export function usePoolTogetherPrizePoolAwardExternalErc20<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof poolTogetherPrizePoolABI, 'awardExternalERC20'>['abi'],
        'awardExternalERC20'
      > & { functionName?: 'awardExternalERC20' }
    : UseContractWriteConfig<TMode, typeof poolTogetherPrizePoolABI, 'awardExternalERC20'> & {
        abi?: never
        functionName?: 'awardExternalERC20'
      } = {} as any
) {
  return useContractWrite<TMode, typeof poolTogetherPrizePoolABI, 'awardExternalERC20'>({
    abi: poolTogetherPrizePoolABI,
    functionName: 'awardExternalERC20',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"awardExternalERC721"`.
 */
export function usePoolTogetherPrizePoolAwardExternalErc721<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof poolTogetherPrizePoolABI, 'awardExternalERC721'>['abi'],
        'awardExternalERC721'
      > & { functionName?: 'awardExternalERC721' }
    : UseContractWriteConfig<TMode, typeof poolTogetherPrizePoolABI, 'awardExternalERC721'> & {
        abi?: never
        functionName?: 'awardExternalERC721'
      } = {} as any
) {
  return useContractWrite<TMode, typeof poolTogetherPrizePoolABI, 'awardExternalERC721'>({
    abi: poolTogetherPrizePoolABI,
    functionName: 'awardExternalERC721',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"balance"`.
 */
export function usePoolTogetherPrizePoolBalance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof poolTogetherPrizePoolABI, 'balance'>['abi'], 'balance'> & {
        functionName?: 'balance'
      }
    : UseContractWriteConfig<TMode, typeof poolTogetherPrizePoolABI, 'balance'> & {
        abi?: never
        functionName?: 'balance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof poolTogetherPrizePoolABI, 'balance'>({
    abi: poolTogetherPrizePoolABI,
    functionName: 'balance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"captureAwardBalance"`.
 */
export function usePoolTogetherPrizePoolCaptureAwardBalance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof poolTogetherPrizePoolABI, 'captureAwardBalance'>['abi'],
        'captureAwardBalance'
      > & { functionName?: 'captureAwardBalance' }
    : UseContractWriteConfig<TMode, typeof poolTogetherPrizePoolABI, 'captureAwardBalance'> & {
        abi?: never
        functionName?: 'captureAwardBalance'
      } = {} as any
) {
  return useContractWrite<TMode, typeof poolTogetherPrizePoolABI, 'captureAwardBalance'>({
    abi: poolTogetherPrizePoolABI,
    functionName: 'captureAwardBalance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"claimOwnership"`.
 */
export function usePoolTogetherPrizePoolClaimOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof poolTogetherPrizePoolABI, 'claimOwnership'>['abi'], 'claimOwnership'> & {
        functionName?: 'claimOwnership'
      }
    : UseContractWriteConfig<TMode, typeof poolTogetherPrizePoolABI, 'claimOwnership'> & {
        abi?: never
        functionName?: 'claimOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof poolTogetherPrizePoolABI, 'claimOwnership'>({
    abi: poolTogetherPrizePoolABI,
    functionName: 'claimOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"compLikeDelegate"`.
 */
export function usePoolTogetherPrizePoolCompLikeDelegate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof poolTogetherPrizePoolABI, 'compLikeDelegate'>['abi'], 'compLikeDelegate'> & {
        functionName?: 'compLikeDelegate'
      }
    : UseContractWriteConfig<TMode, typeof poolTogetherPrizePoolABI, 'compLikeDelegate'> & {
        abi?: never
        functionName?: 'compLikeDelegate'
      } = {} as any
) {
  return useContractWrite<TMode, typeof poolTogetherPrizePoolABI, 'compLikeDelegate'>({
    abi: poolTogetherPrizePoolABI,
    functionName: 'compLikeDelegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"depositTo"`.
 */
export function usePoolTogetherPrizePoolDepositTo<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof poolTogetherPrizePoolABI, 'depositTo'>['abi'], 'depositTo'> & {
        functionName?: 'depositTo'
      }
    : UseContractWriteConfig<TMode, typeof poolTogetherPrizePoolABI, 'depositTo'> & {
        abi?: never
        functionName?: 'depositTo'
      } = {} as any
) {
  return useContractWrite<TMode, typeof poolTogetherPrizePoolABI, 'depositTo'>({
    abi: poolTogetherPrizePoolABI,
    functionName: 'depositTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"depositToAndDelegate"`.
 */
export function usePoolTogetherPrizePoolDepositToAndDelegate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof poolTogetherPrizePoolABI, 'depositToAndDelegate'>['abi'],
        'depositToAndDelegate'
      > & { functionName?: 'depositToAndDelegate' }
    : UseContractWriteConfig<TMode, typeof poolTogetherPrizePoolABI, 'depositToAndDelegate'> & {
        abi?: never
        functionName?: 'depositToAndDelegate'
      } = {} as any
) {
  return useContractWrite<TMode, typeof poolTogetherPrizePoolABI, 'depositToAndDelegate'>({
    abi: poolTogetherPrizePoolABI,
    functionName: 'depositToAndDelegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePoolTogetherPrizePoolRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof poolTogetherPrizePoolABI, 'renounceOwnership'>['abi'], 'renounceOwnership'> & {
        functionName?: 'renounceOwnership'
      }
    : UseContractWriteConfig<TMode, typeof poolTogetherPrizePoolABI, 'renounceOwnership'> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof poolTogetherPrizePoolABI, 'renounceOwnership'>({
    abi: poolTogetherPrizePoolABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"setBalanceCap"`.
 */
export function usePoolTogetherPrizePoolSetBalanceCap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof poolTogetherPrizePoolABI, 'setBalanceCap'>['abi'], 'setBalanceCap'> & {
        functionName?: 'setBalanceCap'
      }
    : UseContractWriteConfig<TMode, typeof poolTogetherPrizePoolABI, 'setBalanceCap'> & {
        abi?: never
        functionName?: 'setBalanceCap'
      } = {} as any
) {
  return useContractWrite<TMode, typeof poolTogetherPrizePoolABI, 'setBalanceCap'>({
    abi: poolTogetherPrizePoolABI,
    functionName: 'setBalanceCap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"setLiquidityCap"`.
 */
export function usePoolTogetherPrizePoolSetLiquidityCap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof poolTogetherPrizePoolABI, 'setLiquidityCap'>['abi'], 'setLiquidityCap'> & {
        functionName?: 'setLiquidityCap'
      }
    : UseContractWriteConfig<TMode, typeof poolTogetherPrizePoolABI, 'setLiquidityCap'> & {
        abi?: never
        functionName?: 'setLiquidityCap'
      } = {} as any
) {
  return useContractWrite<TMode, typeof poolTogetherPrizePoolABI, 'setLiquidityCap'>({
    abi: poolTogetherPrizePoolABI,
    functionName: 'setLiquidityCap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"setPrizeStrategy"`.
 */
export function usePoolTogetherPrizePoolSetPrizeStrategy<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof poolTogetherPrizePoolABI, 'setPrizeStrategy'>['abi'], 'setPrizeStrategy'> & {
        functionName?: 'setPrizeStrategy'
      }
    : UseContractWriteConfig<TMode, typeof poolTogetherPrizePoolABI, 'setPrizeStrategy'> & {
        abi?: never
        functionName?: 'setPrizeStrategy'
      } = {} as any
) {
  return useContractWrite<TMode, typeof poolTogetherPrizePoolABI, 'setPrizeStrategy'>({
    abi: poolTogetherPrizePoolABI,
    functionName: 'setPrizeStrategy',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"setTicket"`.
 */
export function usePoolTogetherPrizePoolSetTicket<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof poolTogetherPrizePoolABI, 'setTicket'>['abi'], 'setTicket'> & {
        functionName?: 'setTicket'
      }
    : UseContractWriteConfig<TMode, typeof poolTogetherPrizePoolABI, 'setTicket'> & {
        abi?: never
        functionName?: 'setTicket'
      } = {} as any
) {
  return useContractWrite<TMode, typeof poolTogetherPrizePoolABI, 'setTicket'>({
    abi: poolTogetherPrizePoolABI,
    functionName: 'setTicket',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"sweep"`.
 */
export function usePoolTogetherPrizePoolSweep<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof poolTogetherPrizePoolABI, 'sweep'>['abi'], 'sweep'> & { functionName?: 'sweep' }
    : UseContractWriteConfig<TMode, typeof poolTogetherPrizePoolABI, 'sweep'> & {
        abi?: never
        functionName?: 'sweep'
      } = {} as any
) {
  return useContractWrite<TMode, typeof poolTogetherPrizePoolABI, 'sweep'>({ abi: poolTogetherPrizePoolABI, functionName: 'sweep', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"transferExternalERC20"`.
 */
export function usePoolTogetherPrizePoolTransferExternalErc20<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof poolTogetherPrizePoolABI, 'transferExternalERC20'>['abi'],
        'transferExternalERC20'
      > & { functionName?: 'transferExternalERC20' }
    : UseContractWriteConfig<TMode, typeof poolTogetherPrizePoolABI, 'transferExternalERC20'> & {
        abi?: never
        functionName?: 'transferExternalERC20'
      } = {} as any
) {
  return useContractWrite<TMode, typeof poolTogetherPrizePoolABI, 'transferExternalERC20'>({
    abi: poolTogetherPrizePoolABI,
    functionName: 'transferExternalERC20',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePoolTogetherPrizePoolTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof poolTogetherPrizePoolABI, 'transferOwnership'>['abi'], 'transferOwnership'> & {
        functionName?: 'transferOwnership'
      }
    : UseContractWriteConfig<TMode, typeof poolTogetherPrizePoolABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<TMode, typeof poolTogetherPrizePoolABI, 'transferOwnership'>({
    abi: poolTogetherPrizePoolABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"withdrawFrom"`.
 */
export function usePoolTogetherPrizePoolWithdrawFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof poolTogetherPrizePoolABI, 'withdrawFrom'>['abi'], 'withdrawFrom'> & {
        functionName?: 'withdrawFrom'
      }
    : UseContractWriteConfig<TMode, typeof poolTogetherPrizePoolABI, 'withdrawFrom'> & {
        abi?: never
        functionName?: 'withdrawFrom'
      } = {} as any
) {
  return useContractWrite<TMode, typeof poolTogetherPrizePoolABI, 'withdrawFrom'>({
    abi: poolTogetherPrizePoolABI,
    functionName: 'withdrawFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__.
 */
export function usePreparePoolTogetherPrizePoolWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof poolTogetherPrizePoolABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: poolTogetherPrizePoolABI, ...config } as UsePrepareContractWriteConfig<
    typeof poolTogetherPrizePoolABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"award"`.
 */
export function usePreparePoolTogetherPrizePoolAward(
  config: Omit<UsePrepareContractWriteConfig<typeof poolTogetherPrizePoolABI, 'award'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: poolTogetherPrizePoolABI, functionName: 'award', ...config } as UsePrepareContractWriteConfig<
    typeof poolTogetherPrizePoolABI,
    'award'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"awardExternalERC20"`.
 */
export function usePreparePoolTogetherPrizePoolAwardExternalErc20(
  config: Omit<UsePrepareContractWriteConfig<typeof poolTogetherPrizePoolABI, 'awardExternalERC20'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: poolTogetherPrizePoolABI, functionName: 'awardExternalERC20', ...config } as UsePrepareContractWriteConfig<
    typeof poolTogetherPrizePoolABI,
    'awardExternalERC20'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"awardExternalERC721"`.
 */
export function usePreparePoolTogetherPrizePoolAwardExternalErc721(
  config: Omit<UsePrepareContractWriteConfig<typeof poolTogetherPrizePoolABI, 'awardExternalERC721'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: poolTogetherPrizePoolABI, functionName: 'awardExternalERC721', ...config } as UsePrepareContractWriteConfig<
    typeof poolTogetherPrizePoolABI,
    'awardExternalERC721'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"balance"`.
 */
export function usePreparePoolTogetherPrizePoolBalance(
  config: Omit<UsePrepareContractWriteConfig<typeof poolTogetherPrizePoolABI, 'balance'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: poolTogetherPrizePoolABI, functionName: 'balance', ...config } as UsePrepareContractWriteConfig<
    typeof poolTogetherPrizePoolABI,
    'balance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"captureAwardBalance"`.
 */
export function usePreparePoolTogetherPrizePoolCaptureAwardBalance(
  config: Omit<UsePrepareContractWriteConfig<typeof poolTogetherPrizePoolABI, 'captureAwardBalance'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: poolTogetherPrizePoolABI, functionName: 'captureAwardBalance', ...config } as UsePrepareContractWriteConfig<
    typeof poolTogetherPrizePoolABI,
    'captureAwardBalance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"claimOwnership"`.
 */
export function usePreparePoolTogetherPrizePoolClaimOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof poolTogetherPrizePoolABI, 'claimOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: poolTogetherPrizePoolABI, functionName: 'claimOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof poolTogetherPrizePoolABI,
    'claimOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"compLikeDelegate"`.
 */
export function usePreparePoolTogetherPrizePoolCompLikeDelegate(
  config: Omit<UsePrepareContractWriteConfig<typeof poolTogetherPrizePoolABI, 'compLikeDelegate'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: poolTogetherPrizePoolABI, functionName: 'compLikeDelegate', ...config } as UsePrepareContractWriteConfig<
    typeof poolTogetherPrizePoolABI,
    'compLikeDelegate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"depositTo"`.
 */
export function usePreparePoolTogetherPrizePoolDepositTo(
  config: Omit<UsePrepareContractWriteConfig<typeof poolTogetherPrizePoolABI, 'depositTo'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: poolTogetherPrizePoolABI, functionName: 'depositTo', ...config } as UsePrepareContractWriteConfig<
    typeof poolTogetherPrizePoolABI,
    'depositTo'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"depositToAndDelegate"`.
 */
export function usePreparePoolTogetherPrizePoolDepositToAndDelegate(
  config: Omit<UsePrepareContractWriteConfig<typeof poolTogetherPrizePoolABI, 'depositToAndDelegate'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: poolTogetherPrizePoolABI, functionName: 'depositToAndDelegate', ...config } as UsePrepareContractWriteConfig<
    typeof poolTogetherPrizePoolABI,
    'depositToAndDelegate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePreparePoolTogetherPrizePoolRenounceOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof poolTogetherPrizePoolABI, 'renounceOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: poolTogetherPrizePoolABI, functionName: 'renounceOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof poolTogetherPrizePoolABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"setBalanceCap"`.
 */
export function usePreparePoolTogetherPrizePoolSetBalanceCap(
  config: Omit<UsePrepareContractWriteConfig<typeof poolTogetherPrizePoolABI, 'setBalanceCap'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: poolTogetherPrizePoolABI, functionName: 'setBalanceCap', ...config } as UsePrepareContractWriteConfig<
    typeof poolTogetherPrizePoolABI,
    'setBalanceCap'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"setLiquidityCap"`.
 */
export function usePreparePoolTogetherPrizePoolSetLiquidityCap(
  config: Omit<UsePrepareContractWriteConfig<typeof poolTogetherPrizePoolABI, 'setLiquidityCap'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: poolTogetherPrizePoolABI, functionName: 'setLiquidityCap', ...config } as UsePrepareContractWriteConfig<
    typeof poolTogetherPrizePoolABI,
    'setLiquidityCap'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"setPrizeStrategy"`.
 */
export function usePreparePoolTogetherPrizePoolSetPrizeStrategy(
  config: Omit<UsePrepareContractWriteConfig<typeof poolTogetherPrizePoolABI, 'setPrizeStrategy'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: poolTogetherPrizePoolABI, functionName: 'setPrizeStrategy', ...config } as UsePrepareContractWriteConfig<
    typeof poolTogetherPrizePoolABI,
    'setPrizeStrategy'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"setTicket"`.
 */
export function usePreparePoolTogetherPrizePoolSetTicket(
  config: Omit<UsePrepareContractWriteConfig<typeof poolTogetherPrizePoolABI, 'setTicket'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: poolTogetherPrizePoolABI, functionName: 'setTicket', ...config } as UsePrepareContractWriteConfig<
    typeof poolTogetherPrizePoolABI,
    'setTicket'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"sweep"`.
 */
export function usePreparePoolTogetherPrizePoolSweep(
  config: Omit<UsePrepareContractWriteConfig<typeof poolTogetherPrizePoolABI, 'sweep'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: poolTogetherPrizePoolABI, functionName: 'sweep', ...config } as UsePrepareContractWriteConfig<
    typeof poolTogetherPrizePoolABI,
    'sweep'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"transferExternalERC20"`.
 */
export function usePreparePoolTogetherPrizePoolTransferExternalErc20(
  config: Omit<UsePrepareContractWriteConfig<typeof poolTogetherPrizePoolABI, 'transferExternalERC20'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: poolTogetherPrizePoolABI, functionName: 'transferExternalERC20', ...config } as UsePrepareContractWriteConfig<
    typeof poolTogetherPrizePoolABI,
    'transferExternalERC20'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePreparePoolTogetherPrizePoolTransferOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof poolTogetherPrizePoolABI, 'transferOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: poolTogetherPrizePoolABI, functionName: 'transferOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof poolTogetherPrizePoolABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `functionName` set to `"withdrawFrom"`.
 */
export function usePreparePoolTogetherPrizePoolWithdrawFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof poolTogetherPrizePoolABI, 'withdrawFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: poolTogetherPrizePoolABI, functionName: 'withdrawFrom', ...config } as UsePrepareContractWriteConfig<
    typeof poolTogetherPrizePoolABI,
    'withdrawFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__.
 */
export function usePoolTogetherPrizePoolEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof poolTogetherPrizePoolABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: poolTogetherPrizePoolABI, ...config } as UseContractEventConfig<typeof poolTogetherPrizePoolABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `eventName` set to `"AwardCaptured"`.
 */
export function usePoolTogetherPrizePoolAwardCapturedEvent(
  config: Omit<UseContractEventConfig<typeof poolTogetherPrizePoolABI, 'AwardCaptured'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: poolTogetherPrizePoolABI, eventName: 'AwardCaptured', ...config } as UseContractEventConfig<
    typeof poolTogetherPrizePoolABI,
    'AwardCaptured'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `eventName` set to `"Awarded"`.
 */
export function usePoolTogetherPrizePoolAwardedEvent(
  config: Omit<UseContractEventConfig<typeof poolTogetherPrizePoolABI, 'Awarded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: poolTogetherPrizePoolABI, eventName: 'Awarded', ...config } as UseContractEventConfig<
    typeof poolTogetherPrizePoolABI,
    'Awarded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `eventName` set to `"AwardedExternalERC20"`.
 */
export function usePoolTogetherPrizePoolAwardedExternalErc20Event(
  config: Omit<UseContractEventConfig<typeof poolTogetherPrizePoolABI, 'AwardedExternalERC20'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: poolTogetherPrizePoolABI, eventName: 'AwardedExternalERC20', ...config } as UseContractEventConfig<
    typeof poolTogetherPrizePoolABI,
    'AwardedExternalERC20'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `eventName` set to `"AwardedExternalERC721"`.
 */
export function usePoolTogetherPrizePoolAwardedExternalErc721Event(
  config: Omit<UseContractEventConfig<typeof poolTogetherPrizePoolABI, 'AwardedExternalERC721'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: poolTogetherPrizePoolABI, eventName: 'AwardedExternalERC721', ...config } as UseContractEventConfig<
    typeof poolTogetherPrizePoolABI,
    'AwardedExternalERC721'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `eventName` set to `"BalanceCapSet"`.
 */
export function usePoolTogetherPrizePoolBalanceCapSetEvent(
  config: Omit<UseContractEventConfig<typeof poolTogetherPrizePoolABI, 'BalanceCapSet'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: poolTogetherPrizePoolABI, eventName: 'BalanceCapSet', ...config } as UseContractEventConfig<
    typeof poolTogetherPrizePoolABI,
    'BalanceCapSet'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `eventName` set to `"ControlledTokenAdded"`.
 */
export function usePoolTogetherPrizePoolControlledTokenAddedEvent(
  config: Omit<UseContractEventConfig<typeof poolTogetherPrizePoolABI, 'ControlledTokenAdded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: poolTogetherPrizePoolABI, eventName: 'ControlledTokenAdded', ...config } as UseContractEventConfig<
    typeof poolTogetherPrizePoolABI,
    'ControlledTokenAdded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `eventName` set to `"Deployed"`.
 */
export function usePoolTogetherPrizePoolDeployedEvent(
  config: Omit<UseContractEventConfig<typeof poolTogetherPrizePoolABI, 'Deployed'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: poolTogetherPrizePoolABI, eventName: 'Deployed', ...config } as UseContractEventConfig<
    typeof poolTogetherPrizePoolABI,
    'Deployed'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `eventName` set to `"Deposited"`.
 */
export function usePoolTogetherPrizePoolDepositedEvent(
  config: Omit<UseContractEventConfig<typeof poolTogetherPrizePoolABI, 'Deposited'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: poolTogetherPrizePoolABI, eventName: 'Deposited', ...config } as UseContractEventConfig<
    typeof poolTogetherPrizePoolABI,
    'Deposited'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `eventName` set to `"ErrorAwardingExternalERC721"`.
 */
export function usePoolTogetherPrizePoolErrorAwardingExternalErc721Event(
  config: Omit<UseContractEventConfig<typeof poolTogetherPrizePoolABI, 'ErrorAwardingExternalERC721'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: poolTogetherPrizePoolABI, eventName: 'ErrorAwardingExternalERC721', ...config } as UseContractEventConfig<
    typeof poolTogetherPrizePoolABI,
    'ErrorAwardingExternalERC721'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `eventName` set to `"LiquidityCapSet"`.
 */
export function usePoolTogetherPrizePoolLiquidityCapSetEvent(
  config: Omit<UseContractEventConfig<typeof poolTogetherPrizePoolABI, 'LiquidityCapSet'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: poolTogetherPrizePoolABI, eventName: 'LiquidityCapSet', ...config } as UseContractEventConfig<
    typeof poolTogetherPrizePoolABI,
    'LiquidityCapSet'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `eventName` set to `"OwnershipOffered"`.
 */
export function usePoolTogetherPrizePoolOwnershipOfferedEvent(
  config: Omit<UseContractEventConfig<typeof poolTogetherPrizePoolABI, 'OwnershipOffered'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: poolTogetherPrizePoolABI, eventName: 'OwnershipOffered', ...config } as UseContractEventConfig<
    typeof poolTogetherPrizePoolABI,
    'OwnershipOffered'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function usePoolTogetherPrizePoolOwnershipTransferredEvent(
  config: Omit<UseContractEventConfig<typeof poolTogetherPrizePoolABI, 'OwnershipTransferred'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: poolTogetherPrizePoolABI, eventName: 'OwnershipTransferred', ...config } as UseContractEventConfig<
    typeof poolTogetherPrizePoolABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `eventName` set to `"PrizeStrategySet"`.
 */
export function usePoolTogetherPrizePoolPrizeStrategySetEvent(
  config: Omit<UseContractEventConfig<typeof poolTogetherPrizePoolABI, 'PrizeStrategySet'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: poolTogetherPrizePoolABI, eventName: 'PrizeStrategySet', ...config } as UseContractEventConfig<
    typeof poolTogetherPrizePoolABI,
    'PrizeStrategySet'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `eventName` set to `"Swept"`.
 */
export function usePoolTogetherPrizePoolSweptEvent(
  config: Omit<UseContractEventConfig<typeof poolTogetherPrizePoolABI, 'Swept'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: poolTogetherPrizePoolABI, eventName: 'Swept', ...config } as UseContractEventConfig<
    typeof poolTogetherPrizePoolABI,
    'Swept'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `eventName` set to `"TicketSet"`.
 */
export function usePoolTogetherPrizePoolTicketSetEvent(
  config: Omit<UseContractEventConfig<typeof poolTogetherPrizePoolABI, 'TicketSet'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: poolTogetherPrizePoolABI, eventName: 'TicketSet', ...config } as UseContractEventConfig<
    typeof poolTogetherPrizePoolABI,
    'TicketSet'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `eventName` set to `"TransferredExternalERC20"`.
 */
export function usePoolTogetherPrizePoolTransferredExternalErc20Event(
  config: Omit<UseContractEventConfig<typeof poolTogetherPrizePoolABI, 'TransferredExternalERC20'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: poolTogetherPrizePoolABI, eventName: 'TransferredExternalERC20', ...config } as UseContractEventConfig<
    typeof poolTogetherPrizePoolABI,
    'TransferredExternalERC20'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link poolTogetherPrizePoolABI}__ and `eventName` set to `"Withdrawal"`.
 */
export function usePoolTogetherPrizePoolWithdrawalEvent(
  config: Omit<UseContractEventConfig<typeof poolTogetherPrizePoolABI, 'Withdrawal'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: poolTogetherPrizePoolABI, eventName: 'Withdrawal', ...config } as UseContractEventConfig<
    typeof poolTogetherPrizePoolABI,
    'Withdrawal'
  >)
}
